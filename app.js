function normalizeIncomes(e){angular.isArray(e)||(e=[e]);var n=[];return angular.forEach(e,function(e){var t={};t.job=e.job,t.payrate=e.payrate,t.hours=e.hours,t.gross=e.payrate*e.hours*4,t.tax=e.taxPercent,t.net=t.gross*(1-e.taxPercent/100),t.biweekly=t.net/2,n.push(t)}),n}function deploydService(e,n,t){this.getIncomes=function(){var o=n.defer();return e.get(t+"/income-sources").success(function(e){o.resolve(normalizeIncomes(e))}).error(function(e){o.reject(e)}),o.promise}}function incomeService(e,n,t){this.message="we still made it!?";var o;this.getIncomes=function(){return angular.isDefined(o)?n.when(o):t.getIncomes().then(function(e){return o=e})}}angular.module("budgettingIsFun",["angular.filter"]).controller("BaseController",["$scope",function(e){e.welcomeMessage="Welcome Savy Budgetter"}]),angular.module("customFilters",[]).filter("unique",function(){return function(e,n){if(angular.isArray(e)&&angular.isString(n)){for(var t=[],o={},r=0;r<e.length;r++){var c=e[r][n];angular.isUndefined(o[c])&&(o[c]=!0,t.push(e[r]))}return console.log(t),t}return e}}),angular.module("budgettingIsFun").constant("deployd","http://localhost:2403").controller("BudgetController",["$http","deployd",function(e,n){var t=this;t.budgets=[],t.items=[],e.get(n+"/budgets").success(function(o){t.budgets=o,e.get(n+"/budget-items").success(function(e){t.items=e}).error(function(e){console.log(e)})}).error(function(e){console.log(e)}),t.newBudget={},t.saveBudget=function(o){e.post(n+"/budgets",{name:o.name,percentAllotment:o.percent}).success(function(e){t.newBudget={},t.budgets.push(e)}).error(function(e){console.log(e)})},t.newItem={},t.addItem=function(o){e.post(n+"/budget-items",{name:o.name,amount:o.amount,budgetId:o.budgetId}).success(function(e){t.newItem={},t.items.push(e)}).error(function(e){console.log(e)})},t.total=function(e){var n=0;return angular.forEach(t.items,function(t){t.budgetId==e&&(n+=t.amount)}),n}}]),angular.module("budgettingIsFun").constant("deployd","http://localhost:2403").service("deploydService",["$http","$q","deployd",deploydService]),angular.module("budgettingIsFun").constant("deployd","http://localhost:2403").constant("partTime","23ab7985d307dab2").constant("fullTime","deb0980f74cd6b33").constant("semiMonthly","6eddc802d96c18f2").constant("biWeekly","c585919ae006086c").constant("yearly","a5b60c5bbd52295d").controller("IncomeController",["$http","deployd","partTime","fullTime","semiMonthly","biWeekly","yearly","incomeService",function(e,n,t,o,r,c,s,u){var i=this;i.message=u.message,u.getIncomes().then(function(e){i.incomes=e},function(e){console.log(e)}),i.types=[],e.get(n+"/income-types").success(function(e){i.types=e}).error(function(e){console.log(e)}),i.newIncome={},i.modifyHours=function(){i.newIncome.type&&i.newIncome.type.id!=t&&(i.newIncome.type.id==o?i.newIncome.hours=40:i.newIncome.type.id==r?i.newIncome.hours=43.3333:i.newIncome.type.id==c?i.newIncome.hours=40:i.newIncome.type.id==s&&(i.newIncome.hours=40))},i.addIncome=function(u){u.type.id==t||u.type.id==o||(u.type.id==r?u.payrate=u.payrate/86.6666:u.type.id==c?u.payrate=u.payrate/80:u.type.id==s?u.payrate=u.payrate/2080:console.log("all failed")),e.post(n+"/income-sources",{job:u.job,incomeType:u.type.id,payrate:u.payrate,hours:u.hours,taxPercent:u.taxPercent}).success(function(e){i.newIncome={},i.incomes.push(i.normalizedIncomes(e)[0])}).error(function(e){console.log(e)})}}]),angular.module("budgettingIsFun").service("incomeService",["$http","$q","deploydService",incomeService]);
//# sourceMappingURL=data:application/json;base64,
